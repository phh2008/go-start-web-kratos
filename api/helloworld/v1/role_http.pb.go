// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v4.23.3
// source: api/helloworld/v1/role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleAdd = "/api.helloworld.v1.Role/Add"
const OperationRoleAssignPermission = "/api.helloworld.v1.Role/AssignPermission"
const OperationRoleDeleteById = "/api.helloworld.v1.Role/DeleteById"
const OperationRoleGetByCode = "/api.helloworld.v1.Role/GetByCode"
const OperationRoleListPage = "/api.helloworld.v1.Role/ListPage"

type RoleHTTPServer interface {
	Add(context.Context, *RoleSaveRequest) (*RoleReply, error)
	AssignPermission(context.Context, *RoleAssignPermRequest) (*RoleOk, error)
	DeleteById(context.Context, *RoleDeleteRequest) (*RoleOk, error)
	GetByCode(context.Context, *RoleCodeRequest) (*RoleReply, error)
	ListPage(context.Context, *RoleListRequest) (*RoleListReply, error)
}

func RegisterRoleHTTPServer(s *http.Server, srv RoleHTTPServer) {
	r := s.Route("/")
	r.GET("/role/list", _Role_ListPage0_HTTP_Handler(srv))
	r.POST("/role/add", _Role_Add0_HTTP_Handler(srv))
	r.GET("/role/code", _Role_GetByCode0_HTTP_Handler(srv))
	r.POST("/role/assignPerm", _Role_AssignPermission0_HTTP_Handler(srv))
	r.POST("/role/delete", _Role_DeleteById0_HTTP_Handler(srv))
}

func _Role_ListPage0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleListPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPage(ctx, req.(*RoleListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleListReply)
		return ctx.Result(200, reply)
	}
}

func _Role_Add0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleSaveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*RoleSaveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_GetByCode0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleCodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleGetByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetByCode(ctx, req.(*RoleCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleReply)
		return ctx.Result(200, reply)
	}
}

func _Role_AssignPermission0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleAssignPermRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleAssignPermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AssignPermission(ctx, req.(*RoleAssignPermRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleOk)
		return ctx.Result(200, reply)
	}
}

func _Role_DeleteById0_HTTP_Handler(srv RoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleDeleteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleDeleteById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteById(ctx, req.(*RoleDeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoleOk)
		return ctx.Result(200, reply)
	}
}

type RoleHTTPClient interface {
	Add(ctx context.Context, req *RoleSaveRequest, opts ...http.CallOption) (rsp *RoleReply, err error)
	AssignPermission(ctx context.Context, req *RoleAssignPermRequest, opts ...http.CallOption) (rsp *RoleOk, err error)
	DeleteById(ctx context.Context, req *RoleDeleteRequest, opts ...http.CallOption) (rsp *RoleOk, err error)
	GetByCode(ctx context.Context, req *RoleCodeRequest, opts ...http.CallOption) (rsp *RoleReply, err error)
	ListPage(ctx context.Context, req *RoleListRequest, opts ...http.CallOption) (rsp *RoleListReply, err error)
}

type RoleHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleHTTPClient(client *http.Client) RoleHTTPClient {
	return &RoleHTTPClientImpl{client}
}

func (c *RoleHTTPClientImpl) Add(ctx context.Context, in *RoleSaveRequest, opts ...http.CallOption) (*RoleReply, error) {
	var out RoleReply
	pattern := "/role/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) AssignPermission(ctx context.Context, in *RoleAssignPermRequest, opts ...http.CallOption) (*RoleOk, error) {
	var out RoleOk
	pattern := "/role/assignPerm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleAssignPermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) DeleteById(ctx context.Context, in *RoleDeleteRequest, opts ...http.CallOption) (*RoleOk, error) {
	var out RoleOk
	pattern := "/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleDeleteById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) GetByCode(ctx context.Context, in *RoleCodeRequest, opts ...http.CallOption) (*RoleReply, error) {
	var out RoleReply
	pattern := "/role/code"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleGetByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RoleHTTPClientImpl) ListPage(ctx context.Context, in *RoleListRequest, opts ...http.CallOption) (*RoleListReply, error) {
	var out RoleListReply
	pattern := "/role/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleListPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
