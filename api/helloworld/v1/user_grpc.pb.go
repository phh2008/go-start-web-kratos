// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: api/helloworld/v1/user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_ListPage_FullMethodName      = "/api.helloworld.v1.User/ListPage"
	User_CreateByEmail_FullMethodName = "/api.helloworld.v1.User/CreateByEmail"
	User_LoginByEmail_FullMethodName  = "/api.helloworld.v1.User/LoginByEmail"
	User_AssignRole_FullMethodName    = "/api.helloworld.v1.User/AssignRole"
	User_DeleteById_FullMethodName    = "/api.helloworld.v1.User/DeleteById"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	ListPage(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListReply, error)
	CreateByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserReply, error)
	LoginByEmail(ctx context.Context, in *UserEmailLoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*UserOk, error)
	DeleteById(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserOk, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) ListPage(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListReply, error) {
	out := new(UserListReply)
	err := c.cc.Invoke(ctx, User_ListPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateByEmail(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, User_CreateByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByEmail(ctx context.Context, in *UserEmailLoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, User_LoginByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*UserOk, error) {
	out := new(UserOk)
	err := c.cc.Invoke(ctx, User_AssignRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteById(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*UserOk, error) {
	out := new(UserOk)
	err := c.cc.Invoke(ctx, User_DeleteById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	ListPage(context.Context, *UserListRequest) (*UserListReply, error)
	CreateByEmail(context.Context, *UserEmailRequest) (*UserReply, error)
	LoginByEmail(context.Context, *UserEmailLoginRequest) (*LoginReply, error)
	AssignRole(context.Context, *AssignRoleRequest) (*UserOk, error)
	DeleteById(context.Context, *UserDeleteRequest) (*UserOk, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) ListPage(context.Context, *UserListRequest) (*UserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedUserServer) CreateByEmail(context.Context, *UserEmailRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateByEmail not implemented")
}
func (UnimplementedUserServer) LoginByEmail(context.Context, *UserEmailLoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByEmail not implemented")
}
func (UnimplementedUserServer) AssignRole(context.Context, *AssignRoleRequest) (*UserOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedUserServer) DeleteById(context.Context, *UserDeleteRequest) (*UserOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListPage(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateByEmail(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LoginByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByEmail(ctx, req.(*UserEmailLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AssignRole(ctx, req.(*AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteById(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPage",
			Handler:    _User_ListPage_Handler,
		},
		{
			MethodName: "CreateByEmail",
			Handler:    _User_CreateByEmail_Handler,
		},
		{
			MethodName: "LoginByEmail",
			Handler:    _User_LoginByEmail_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _User_AssignRole_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _User_DeleteById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/user.proto",
}
