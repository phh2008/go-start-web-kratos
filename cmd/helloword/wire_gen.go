// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"helloword/internal/biz"
	"helloword/internal/conf"
	"helloword/internal/data"
	"helloword/internal/server"
	"helloword/internal/service"
	"helloword/pkg/logger"
	"helloword/pkg/orm"
	"helloword/pkg/xcasbin"
	"helloword/pkg/xjwt"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logLogger log.Logger) (*kratos.App, func(), error) {
	jwtHelper := xjwt.NewJwtHelper(bootstrap)
	db := orm.NewDB(bootstrap)
	enforcer := xcasbin.NewCasbin(db, bootstrap, logLogger)
	userRepo := data.NewUserRepo(db)
	userUseCase := biz.NewUserUseCase(userRepo, jwtHelper, enforcer)
	userService := service.NewUserService(userUseCase)
	roleRepo := data.NewRoleRepo(db)
	rolePermissionRepo := data.NewRolePermissionRepo(db)
	permissionRepo := data.NewPermissionRepo(db)
	roleUseCase := biz.NewRoleUseCase(roleRepo, rolePermissionRepo, permissionRepo, enforcer, userRepo)
	roleService := service.NewRoleService(roleUseCase)
	permissionUseCase := biz.NewPermissionUseCase(permissionRepo, enforcer)
	permissionService := service.NewPermissionService(permissionUseCase)
	grpcServer := server.NewGRPCServer(bootstrap, jwtHelper, enforcer, userService, roleService, permissionService)
	httpServer := server.NewHTTPServer(bootstrap, jwtHelper, enforcer, userService, roleService, permissionService)
	zapLogger := logger.NewLogger(bootstrap)
	app := newApp(logLogger, grpcServer, httpServer, zapLogger)
	return app, func() {
	}, nil
}
